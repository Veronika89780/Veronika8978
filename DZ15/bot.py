"""
Telegram-–±–æ—Ç ¬´–ê–Ω–∫–µ—Ç–∞ + –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª.
–°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏-–æ–ø—Ä–æ—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ SQLite –∏ –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é:
- –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã
- –≠–∫—Å–ø–æ—Ä—Ç CSV
- –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ
- –°–ø—Ä–∞–≤–∫–∞

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- python-telegram-bot==21.4 (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π PTB v21)
- SQLite –≤ —Ñ–∞–π–ª–µ survey.db
- .env –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è TELEGRAM_BOT_TOKEN

–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:
1) python -m venv venv && (venv\Scripts\activate) / (source venv/bin/activate)
2) pip install python-telegram-bot==21.4 python-dotenv==1.0.1
3) —Å–æ–∑–¥–∞—Ç—å .env —Å TELEGRAM_BOT_TOKEN=...
4) python bot.py
"""

import os
import io
import csv
import logging
import sqlite3
from datetime import datetime
from typing import Optional, Dict, List, Tuple

from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InputFile,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ------------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï -------------------------
logging.basicConfig(
    format="%(asctime)s | %(name)s | %(levelname)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("survey-bot")

# ------------------------- –ö–û–ù–°–¢–ê–ù–¢–´ / –ù–ê–°–¢–†–û–ô–ö–ò -------------------------
DB_PATH = "survey.db"
TABLE_SQL = """
CREATE TABLE IF NOT EXISTS respondents (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_user_id INTEGER,
    tg_username TEXT,
    q_name TEXT,
    q_age INTEGER,
    q_city TEXT,
    q_stack TEXT,
    q_consent INTEGER,
    created_at TEXT
);
"""

# –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ)
def ensure_table_exists() -> None:
    conn = connect_db()
    try:
        conn.execute(TABLE_SQL)
        conn.commit()
    finally:
        conn.close()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –£ –Ω–∞—Å –µ—Å—Ç—å "–º–µ–Ω—é" –∏ 5 —à–∞–≥–æ–≤ –∞–Ω–∫–µ—Ç—ã
MENU, Q_NAME, Q_AGE, Q_CITY, Q_STACK, Q_CONSENT = range(6)

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
STACK_OPTIONS = ["–ù–∏–∫–æ–≥–¥–∞", "–ù–æ–≤–∏—á–æ–∫", "1‚Äì3 –≥–æ–¥–∞", "3+ –ª–µ—Ç"]
CONSENT_OPTIONS = ["–î–∞", "–ù–µ—Ç"]

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —è—Ä–ª—ã–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (—á—Ç–æ–±—ã —É–¥–æ–±–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å)
BTN_SURVEY = "üìù –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É"
BTN_STATS = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
BTN_LAST = "üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã"
BTN_EXPORT = "üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV"
BTN_DELETE_ME = "üóë –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"
BTN_HELP = "‚ùì –°–ø—Ä–∞–≤–∫–∞"

MENU_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton(BTN_SURVEY)],
        [KeyboardButton(BTN_STATS), KeyboardButton(BTN_LAST)],
        [KeyboardButton(BTN_EXPORT), KeyboardButton(BTN_DELETE_ME)],
        [KeyboardButton(BTN_HELP)],
    ],
    resize_keyboard=True,
)

# ------------------------- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô -------------------------
def connect_db() -> sqlite3.Connection:
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î. –í –ø—Ä–æ—Å—Ç–æ–º –±–æ—Ç–µ –Ω–∞–º —Ö–≤–∞—Ç–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ sqlite3."""
    return sqlite3.connect(DB_PATH)

def init_db() -> None:
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ."""
    conn = connect_db()
    try:
        conn.execute(TABLE_SQL)
        conn.commit()
    finally:
        conn.close()

def insert_row(
    tg_user_id: int,
    tg_username: Optional[str],
    q_name: str,
    q_age: int,
    q_city: str,
    q_stack: str,
    q_consent: bool,
) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∫–µ—Ç—ã."""
    conn = connect_db()
    try:
        conn.execute(
            """
            INSERT INTO respondents (
                tg_user_id, tg_username, q_name, q_age, q_city, q_stack, q_consent, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                tg_user_id,
                tg_username,
                q_name,
                q_age,
                q_city,
                q_stack,
                1 if q_consent else 0,
                datetime.utcnow().isoformat(timespec="seconds") + "Z",
            ),
        )
        conn.commit()
    finally:
        conn.close()

def count_rows() -> int:
    """–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î."""
    conn = connect_db()
    try:
        (n,) = conn.execute("SELECT COUNT(*) FROM respondents;").fetchone()
        return int(n)
    finally:
        conn.close()

def get_last_rows(limit: int = 10) -> List[Tuple]:
    """–ü–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –µ—â—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫."""
    conn = connect_db()
    try:
        try:
            rows = conn.execute(
                """
                SELECT id, tg_username, q_name, q_age, q_city, q_stack, q_consent, created_at
                FROM respondents
                ORDER BY id DESC
                LIMIT ?
                """,
                (limit,),
            ).fetchall()
            return rows
        except sqlite3.OperationalError:
            # —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç -> —Å–æ–∑–¥–∞—ë–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ
            return []
    finally:
        conn.close()


def get_stats() -> Dict[str, object]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    - –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –µ—â—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ø—É—Å—Ç—ã–µ" –º–µ—Ç—Ä–∏–∫–∏.
    """
    try:
        conn = connect_db()
        try:
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            conn.execute("SELECT 1 FROM respondents LIMIT 1;")
        except sqlite3.OperationalError:
            # —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç -> —Å–æ–∑–¥–∞—ë–º –∏ –æ—Ç–¥–∞—ë–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            conn.close()
            ensure_table_exists()
            return {
                "total": 0,
                "avg_age": None,
                "min_age": None,
                "max_age": None,
                "by_stack": {},
                "top_cities": [],
                "consent_rate": None,
            }

        # --- –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
        total, avg_age, min_age, max_age = conn.execute(
            """
            SELECT COUNT(*), AVG(q_age), MIN(q_age), MAX(q_age)
            FROM respondents
            WHERE q_age IS NOT NULL
            """
        ).fetchone()

        by_stack_rows = conn.execute(
            """
            SELECT q_stack, COUNT(*) as cnt
            FROM respondents
            WHERE q_stack IS NOT NULL
            GROUP BY q_stack
            ORDER BY cnt DESC
            """
        ).fetchall()
        by_stack = {k if k is not None else "‚Äî": int(v) for k, v in by_stack_rows}

        top_cities = conn.execute(
            """
            SELECT q_city, COUNT(*) as cnt
            FROM respondents
            WHERE q_city IS NOT NULL AND TRIM(q_city) <> ''
            GROUP BY q_city
            ORDER BY cnt DESC, q_city ASC
            LIMIT 5
            """
        ).fetchall()

        consent = conn.execute(
            """
            SELECT AVG(CAST(q_consent AS FLOAT))
            FROM respondents
            WHERE q_consent IN (0,1)
            """
        ).fetchone()[0]
        consent_rate = float(consent) if consent is not None else None

        return {
            "total": int(total or 0),
            "avg_age": float(avg_age) if avg_age is not None else None,
            "min_age": int(min_age) if min_age is not None else None,
            "max_age": int(max_age) if max_age is not None else None,
            "by_stack": by_stack,
            "top_cities": [(c or "‚Äî", int(n)) for c, n in top_cities],
            "consent_rate": consent_rate,
        }
    finally:
        try:
            conn.close()
        except Exception:
            pass

def export_csv_bytes() -> bytes:
    """–í—ã–≥—Ä—É–∂–∞–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –≤ CSV, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ bytes –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    conn = connect_db()
    try:
        rows = conn.execute(
            """
            SELECT id, tg_user_id, tg_username, q_name, q_age, q_city, q_stack, q_consent, created_at
            FROM respondents
            ORDER BY id ASC
            """
        ).fetchall()
    finally:
        conn.close()

    # –ü–∏—à–µ–º CSV –≤ –ø–∞–º—è—Ç—å (StringIO -> encode)
    buf = io.StringIO(newline="")
    writer = csv.writer(buf)
    writer.writerow(["id", "tg_user_id", "tg_username", "q_name", "q_age",
                     "q_city", "q_stack", "q_consent", "created_at"])
    for r in rows:
        writer.writerow(r)
    return buf.getvalue().encode("utf-8")

def delete_user_data(tg_user_id: int) -> int:
    """–£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫."""
    conn = connect_db()
    try:
        cur = conn.execute("DELETE FROM respondents WHERE tg_user_id = ?;", (tg_user_id,))
        conn.commit()
        return cur.rowcount or 0
    finally:
        conn.close()

# ------------------------- –•–ï–õ–ü–ï–†–´ –î–õ–Ø UI -------------------------
def menu_text() -> str:
    """–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –º–µ–Ω—é."""
    return (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∏–Ω–∏-–∞–Ω–∫–µ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ SQLite.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:\n"
        f"‚Ä¢ {BTN_SURVEY} ‚Äî –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (5 –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
        f"‚Ä¢ {BTN_STATS} ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        f"‚Ä¢ {BTN_LAST} ‚Äî —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ {BTN_EXPORT} ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤ CSV\n"
        f"‚Ä¢ {BTN_DELETE_ME} ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã\n"
        f"‚Ä¢ {BTN_HELP} ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ /cancel, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
    )

def format_stats(stats: Dict[str, object]) -> str:
    """–ì–æ—Ç–æ–≤–∏–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    total = stats["total"]
    avg_age = stats["avg_age"]
    min_age = stats["min_age"]
    max_age = stats["max_age"]
    by_stack = stats["by_stack"]
    top_cities = stats["top_cities"]
    consent_rate = stats["consent_rate"]

    # –ë–ª–æ–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞
    age_block = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if avg_age is not None:
        age_block = f"—Å—Ä–µ–¥–Ω–∏–π {avg_age:.1f}, –º–∏–Ω {min_age}, –º–∞–∫—Å {max_age}"

    # –ë–ª–æ–∫ —Å–æ–≥–ª–∞—Å–∏—è
    consent_block = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if consent_rate is not None:
        consent_block = f"{consent_rate*100:.1f}% —Å–æ–≥–ª–∞—Å–∏–π"

    # –ë–ª–æ–∫ –ø–æ –æ–ø—ã—Ç—É
    if by_stack:
        stack_lines = [f"- {k}: {v}" for k, v in by_stack.items()]
        stack_block = "\n".join(stack_lines)
    else:
        stack_block = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    # –¢–û–ü-–≥–æ—Ä–æ–¥–æ–≤
    if top_cities:
        city_lines = [f"- {c}: {n}" for c, n in top_cities]
        cities_block = "\n".join(city_lines)
    else:
        cities_block = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    return (
        "üìä *–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
        f"–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: *{total}*\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age_block}\n"
        f"–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: {consent_block}\n\n"
        "*–û–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:*\n"
        f"{stack_block}\n\n"
        "*–¢–û–ü-5 –≥–æ—Ä–æ–¥–æ–≤:*\n"
        f"{cities_block}"
    )

def format_last_rows(rows: List[Tuple]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–∫—Ä–∞—Ç–∫–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫)."""
    if not rows:
        return "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
    lines = []
    for (id_, username, name, age, city, stack, consent, created_at) in rows:
        uname = f"@{username}" if username else "‚Äî"
        agree = "–î–∞" if consent == 1 else "–ù–µ—Ç"
        lines.append(
            f"#{id_} {uname}\n"
            f"  –ò–º—è: {name}; –í–æ–∑—Ä–∞—Å—Ç: {age}; –ì–æ—Ä–æ–¥: {city}\n"
            f"  –û–ø—ã—Ç: {stack}; –°–æ–≥–ª–∞—Å–∏–µ: {agree}; –í—Ä–µ–º—è: {created_at}"
        )
    return "üóÇ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã*\n" + "\n\n".join(lines)

# ------------------------- –ö–û–ú–ê–ù–î–´ (–í–ù–ï –î–ò–ê–õ–û–ì–ê –ò–õ–ò –ú–ï–ù–Æ) -------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ /start (–∏ —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU)."""
    await update.message.reply_text(menu_text(), reply_markup=MENU_KEYBOARD, parse_mode="Markdown")
    return MENU

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/help ‚Äî —Ç–æ–∂–µ –≤ –º–µ–Ω—é."""
    await update.message.reply_text(menu_text(), reply_markup=MENU_KEYBOARD, parse_mode="Markdown")
    return MENU

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/cancel ‚Äî –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–Ω–∫–µ—Ç—ã, –µ—Å–ª–∏ –±—ã–ª–∞."""
    await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MENU_KEYBOARD)
    return MENU

# ------------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–ù–Æ -------------------------
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ MENU. –ü–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ —Ä–µ—à–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å:
    - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É,
    - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,
    - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ,
    - —ç–∫—Å–ø–æ—Ä—Ç CSV,
    - —É–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ,
    - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É.
    """
    text = (update.message.text or "").strip()

    if text == BTN_SURVEY:
        # –°—Ç–∞—Ä—Ç—É–µ–º –∞–Ω–∫–µ—Ç—É: –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∏–º—è, —É–±–∏—Ä–∞–µ–º –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await update.message.reply_text(
            "–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.\n\n"
            "–í–æ–ø—Ä–æ—Å 1/5: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
            reply_markup=ReplyKeyboardRemove(),
        )
        return Q_NAME

    elif text == BTN_STATS:
        stats = get_stats()
        await update.message.reply_text(format_stats(stats), parse_mode="Markdown", reply_markup=MENU_KEYBOARD)
        return MENU

    elif text == BTN_LAST:
        rows = get_last_rows(limit=10)
        await update.message.reply_text(format_last_rows(rows), parse_mode="Markdown", reply_markup=MENU_KEYBOARD)
        return MENU

    elif text == BTN_EXPORT:
        data = export_csv_bytes()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–∏—Ç–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º
        await update.message.reply_document(
            document=InputFile(io.BytesIO(data), filename="survey_export.csv"),
            caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ CSV.",
            reply_markup=MENU_KEYBOARD,
        )
        return MENU

    elif text == BTN_DELETE_ME:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deleted = delete_user_data(update.effective_user.id)
        await update.message.reply_text(
            f"–ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {deleted}.",
            reply_markup=MENU_KEYBOARD,
        )
        return MENU

    elif text == BTN_HELP:
        await update.message.reply_text(menu_text(), reply_markup=MENU_KEYBOARD, parse_mode="Markdown")
        return MENU

    else:
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ –º–µ–Ω—é
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.", reply_markup=MENU_KEYBOARD)
        return MENU

# ------------------------- –õ–û–ì–ò–ö–ê –ê–ù–ö–ï–¢–´ (5 –í–û–ü–†–û–°–û–í) -------------------------
async def q_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å 1/5 ‚Äî –∏–º—è (–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, >=2 —Å–∏–º–≤–æ–ª–æ–≤)."""
    name = (update.message.text or "").strip()
    if len(name) < 2:
        await update.message.reply_text("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return Q_NAME

    context.user_data["q_name"] = name
    await update.message.reply_text("–í–æ–ø—Ä–æ—Å 2/5: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 27):")
    return Q_AGE

async def q_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å 2/5 ‚Äî –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ 10..120)."""
    raw = (update.message.text or "").strip()
    if not raw.isdigit():
        await update.message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –µ—â—ë —Ä–∞–∑:")
        return Q_AGE

    age = int(raw)
    if age < 10 or age > 120:
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (10‚Äì120). –ï—â—ë —Ä–∞–∑:")
        return Q_AGE

    context.user_data["q_age"] = age
    await update.message.reply_text("–í–æ–ø—Ä–æ—Å 3/5: –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?")
    return Q_CITY

async def q_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å 3/5 ‚Äî –≥–æ—Ä–æ–¥ (—Å—Ç—Ä–æ–∫–∞, >=2 —Å–∏–º–≤–æ–ª–æ–≤)."""
    city = (update.message.text or "").strip()
    if len(city) < 2:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
        return Q_CITY

    context.user_data["q_city"] = city
    # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–ø—ã—Ç–∞
    keyboard = [[KeyboardButton(opt)] for opt in STACK_OPTIONS]
    await update.message.reply_text(
        "–í–æ–ø—Ä–æ—Å 4/5: –í–∞—à –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return Q_STACK

async def q_stack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å 4/5 ‚Äî –æ–ø—ã—Ç (–≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞)."""
    stack = (update.message.text or "").strip()
    if stack not in STACK_OPTIONS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return Q_STACK

    context.user_data["q_stack"] = stack
    keyboard = [[KeyboardButton(opt)] for opt in CONSENT_OPTIONS]
    await update.message.reply_text(
        "–í–æ–ø—Ä–æ—Å 5/5: –°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤? (–î–∞/–ù–µ—Ç)",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return Q_CONSENT

async def q_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å 5/5 ‚Äî —Å–æ–≥–ª–∞—Å–∏–µ (–î–∞/–ù–µ—Ç). –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é."""
    consent_text = (update.message.text or "").strip()
    if consent_text not in CONSENT_OPTIONS:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return Q_CONSENT

    consent = (consent_text == "–î–∞")
    context.user_data["q_consent"] = consent

    # –ü–∏—à–µ–º –≤ –ë–î
    try:
        insert_row(
            tg_user_id=update.effective_user.id,
            tg_username=update.effective_user.username,
            q_name=context.user_data["q_name"],
            q_age=context.user_data["q_age"],
            q_city=context.user_data["q_city"],
            q_stack=context.user_data["q_stack"],
            q_consent=consent,
        )
    except Exception as e:
        logger.exception("DB insert error")
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=MENU_KEYBOARD,
        )
        return MENU

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.",
        reply_markup=MENU_KEYBOARD,
    )
    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ MENU
    return MENU

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ª–æ–≤—É—à–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –ø–∏—à–µ–º –≤ –ª–æ–≥–∏, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–Ω–æ–≥–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º."""
    logger.exception("Unhandled error: %s", context.error)

# ------------------------- –¢–û–ß–ö–ê –í–•–û–î–ê -------------------------
def main():
    # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º .env, –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    # 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (—Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
    init_db()

    # 3) –°—Ç—Ä–æ–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PTB
    app = Application.builder().token(token).build()

    # 4) ConversationHandler: –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU + 5 —à–∞–≥–æ–≤ –∞–Ω–∫–µ—Ç—ã
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", cmd_start),
            CommandHandler("help", cmd_help),
        ],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
            Q_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_name)],
            Q_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_age)],
            Q_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_city)],
            Q_STACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_stack)],
            Q_CONSENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_consent)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        name="survey_conversation",
        persistent=False,
    )

    # 5) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Å—Ç–∞—Ä—Ç—É–µ–º
    app.add_handler(conv)
    app.add_error_handler(on_error)

    logger.info("Bot is starting...")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
