# -*- coding: utf-8 -*-
"""
–ë–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –º–µ–Ω—é –Ω–∞ ReplyKeyboardMarkup.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ö—Ä–∞—Å–∏–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏).
- –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –∏ –ø–æ–¥–ø—É–Ω–∫—Ç–∞–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.
- –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í –º–µ–Ω—é".
- /start –∏ /help –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
- –¢–µ–∫—Å—Ç—ã —Ä–∞–∑–¥–µ–ª–æ–≤ ‚Äî –∑–∞–≥–ª—É—à–∫–∏ Lorem Ipsum (–º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏).

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    python-telegram-bot==21.4
    python-dotenv==1.0.1

–ó–∞–ø—É—Å–∫:
    1) pip install -r requirements.txt (–∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ README –≤—ã—à–µ)
    2) .env —Å TELEGRAM_BOT_TOKEN=...
    3) python bot_reference.py
"""

import os
import logging
from typing import Dict, Any, Optional, List

from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ------------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï -------------------------
logging.basicConfig(
    format="%(asctime)s | %(name)s | %(levelname)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("reference-bot")

# ------------------------- –°–û–°–¢–û–Ø–ù–ò–Ø (FSM) -------------------------
MAIN, ABOUT, PRODUCTS, PRICING, FAQ, CONTACTS = range(6)

# ------------------------- –¢–ï–ö–°–¢–´-–ó–ê–ì–õ–£–®–ö–ò -------------------------
LOREM = (
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. "
    "Suspendisse potenti. Quisque vestibulum, nunc non placerat "
    "hendrerit, nibh quam accumsan neque, in fermentum erat erat at "
    "nisi. Integer posuere bibendum lorem, at porttitor leo posuere eu."
)

ABOUT_TEXT = (
    "üî∑ –û –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
    f"{LOREM}\n\n"
    "–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –¥–µ–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π. "
    "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –æ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."
)

PRICING_TEXT = (
    "üí∏ –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã\n\n"
    f"{LOREM}\n\n"
    "‚Äî –ë–∞–∑–æ–≤—ã–π: 0 ‚ÇΩ/–º–µ—Å (–¥–µ–º–æ)\n"
    "‚Äî –°—Ç–∞–Ω–¥–∞—Ä—Ç: 990 ‚ÇΩ/–º–µ—Å\n"
    "‚Äî –ü—Ä–µ–º–∏—É–º: 2990 ‚ÇΩ/–º–µ—Å\n\n"
    "–¶–µ–Ω—ã ‚Äî –ø—Ä–∏–º–µ—Ä—ã. –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ."
)

FAQ_TEXT = (
    "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
    "Q: –ö–∞–∫ –Ω–∞—á–∞—Ç—å?\n"
    f"A: {LOREM}\n\n"
    "Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"
    f"A: {LOREM}\n\n"
    "Q: –ì–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è?\n"
    f"A: {LOREM}\n"
)

CONTACTS_TEXT = (
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
    f"{LOREM}\n\n"
    "Email: help@example.com\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 000-00-00\n"
    "–ê–¥—Ä–µ—Å: 123456, –†–æ—Å—Å–∏—è, –ü—Ä–∏–º–µ—Ä-–≥–æ—Ä–æ–¥, —É–ª. –û–±—Ä–∞–∑—Ü–æ–≤–∞—è, 1"
)

# –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã ¬´–ü—Ä–æ–¥—É–∫—Ç—ã¬ª
PRODUCT_A_TEXT = (
    "üß© –ü—Ä–æ–¥—É–∫—Ç –ê ‚Äî –∫—Ä–∞—Ç–∫–æ\n\n"
    f"{LOREM}\n\n"
    "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
    "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç\n‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å"
)
PRODUCT_B_TEXT = (
    "üß© –ü—Ä–æ–¥—É–∫—Ç –ë ‚Äî –∫—Ä–∞—Ç–∫–æ\n\n"
    f"{LOREM}\n\n"
    "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
    "‚Ä¢ –†–∞—Å—à–∏—Ä—è–µ–º—ã–µ –º–æ–¥—É–ª–∏\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
)
PRODUCT_C_TEXT = (
    "üß© –ü—Ä–æ–¥—É–∫—Ç –í ‚Äî –∫—Ä–∞—Ç–∫–æ\n\n"
    f"{LOREM}\n\n"
    "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:\n"
    "‚Ä¢ –ù–µ–±–æ–ª—å—à–∏—Ö –∫–æ–º–∞–Ω–¥\n‚Ä¢ –ü–∏–ª–æ—Ç–æ–≤\n‚Ä¢ –û–±—É—á–µ–Ω–∏—è"
)

# ------------------------- –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ -------------------------
BTN_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BTN_HOME = "üè† –í –º–µ–Ω—é"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
BTN_ABOUT = "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"
BTN_PRODUCTS = "üß© –ü—Ä–æ–¥—É–∫—Ç—ã"
BTN_PRICING = "üí∏ –¶–µ–Ω—ã"
BTN_FAQ = "‚ùì FAQ"
BTN_CONTACTS = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"
BTN_HELP = "‚ùî –°–ø—Ä–∞–≤–∫–∞"

# –ü–æ–¥–º–µ–Ω—é ¬´–ü—Ä–æ–¥—É–∫—Ç—ã¬ª
BTN_PROD_A = "üß© –ü—Ä–æ–¥—É–∫—Ç –ê"
BTN_PROD_B = "üß© –ü—Ä–æ–¥—É–∫—Ç –ë"
BTN_PROD_C = "üß© –ü—Ä–æ–¥—É–∫—Ç –í"

# ------------------------- –ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–† -------------------------
def main_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    rows = [
        [KeyboardButton(BTN_ABOUT), KeyboardButton(BTN_PRODUCTS)],
        [KeyboardButton(BTN_PRICING), KeyboardButton(BTN_FAQ)],
        [KeyboardButton(BTN_CONTACTS), KeyboardButton(BTN_HELP)],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def section_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–µ–∫—Ü–∏–π: –ù–∞–∑–∞–¥/–î–æ–º–æ–π."""
    rows = [
        [KeyboardButton(BTN_BACK), KeyboardButton(BTN_HOME)],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def products_keyboard() -> ReplyKeyboardMarkup:
    """–ü–æ–¥–º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ + –ù–∞–≤–∏–≥–∞—Ü–∏—è."""
    rows = [
        [KeyboardButton(BTN_PROD_A), KeyboardButton(BTN_PROD_B)],
        [KeyboardButton(BTN_PROD_C)],
        [KeyboardButton(BTN_BACK), KeyboardButton(BTN_HOME)],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# ------------------------- –¢–ï–ö–°–¢ –ú–ï–ù–Æ -------------------------
def menu_text() -> str:
    """–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    return (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:\n"
        f"‚Ä¢ {BTN_ABOUT}\n"
        f"‚Ä¢ {BTN_PRODUCTS}\n"
        f"‚Ä¢ {BTN_PRICING}\n"
        f"‚Ä¢ {BTN_FAQ}\n"
        f"‚Ä¢ {BTN_CONTACTS}\n"
        f"‚Ä¢ {BTN_HELP}\n\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏–ª–∏ ¬´–í –º–µ–Ω—é¬ª."
    )

# ------------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î -------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MAIN."""
    await update.message.reply_text(menu_text(), reply_markup=main_keyboard())
    return MAIN

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–∞–≤–∫–∞: –ø–æ —Å—É—Ç–∏, —Ç–æ–∂–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é + –ø–æ–¥—Å–∫–∞–∑–∫–∞."""
    await update.message.reply_text(
        "–≠—Ç–æ –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫. –ù–∞–≤–∏–≥–∏—Ä—É–π—Ç–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /start, /help, /cancel.",
        reply_markup=main_keyboard(),
    )
    return MAIN

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    await update.message.reply_text("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_keyboard())
    return MAIN

# ------------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ -------------------------
async def handle_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—Ö–æ–¥–∏–º—Å—è –≤ MAIN: —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    text = (update.message.text or "").strip()

    if text == BTN_ABOUT:
        await update.message.reply_text(ABOUT_TEXT, reply_markup=section_keyboard())
        return ABOUT

    if text == BTN_PRODUCTS:
        await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–¥—É–∫—Ç—ã¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø—É–Ω–∫—Ç:", reply_markup=products_keyboard())
        return PRODUCTS

    if text == BTN_PRICING:
        await update.message.reply_text(PRICING_TEXT, reply_markup=section_keyboard())
        return PRICING

    if text == BTN_FAQ:
        await update.message.reply_text(FAQ_TEXT, reply_markup=section_keyboard())
        return FAQ

    if text == BTN_CONTACTS:
        await update.message.reply_text(CONTACTS_TEXT, reply_markup=section_keyboard())
        return CONTACTS

    if text == BTN_HELP:
        return await cmd_help(update, context)

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –ø—Ä–æ –º–µ–Ω—é
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=main_keyboard())
    return MAIN

# ------------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ï–ö–¶–ò–ô -------------------------
async def handle_about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–µ–∫—Ü–∏—è ¬´–û –∫–æ–º–ø–∞–Ω–∏–∏¬ª: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é."""
    text = (update.message.text or "").strip()
    if text == BTN_BACK:
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
        return MAIN
    if text == BTN_HOME:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        return MAIN

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –ø—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –≤–≤–æ–¥–µ
    await update.message.reply_text(ABOUT_TEXT, reply_markup=section_keyboard())
    return ABOUT

async def handle_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–µ–∫—Ü–∏—è ¬´–ü—Ä–æ–¥—É–∫—Ç—ã¬ª: –ø–æ–¥–ø—É–Ω–∫—Ç—ã + –Ω–∞–≤–∏–≥–∞—Ü–∏—è."""
    text = (update.message.text or "").strip()

    if text == BTN_PROD_A:
        await update.message.reply_text(PRODUCT_A_TEXT, reply_markup=products_keyboard())
        return PRODUCTS

    if text == BTN_PROD_B:
        await update.message.reply_text(PRODUCT_B_TEXT, reply_markup=products_keyboard())
        return PRODUCTS

    if text == BTN_PROD_C:
        await update.message.reply_text(PRODUCT_C_TEXT, reply_markup=products_keyboard())
        return PRODUCTS

    if text == BTN_BACK:
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
        return MAIN

    if text == BTN_HOME:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        return MAIN

    # –ù–∞ –ª—é–±–æ–π –∏–Ω–æ–π –≤–≤–æ–¥ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–¥—É–∫—Ç—ã¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø—É–Ω–∫—Ç:", reply_markup=products_keyboard())
    return PRODUCTS

async def handle_pricing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–µ–∫—Ü–∏—è ¬´–¶–µ–Ω—ã¬ª: –Ω–∞–≤–∏–≥–∞—Ü–∏—è."""
    text = (update.message.text or "").strip()
    if text == BTN_BACK:
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
        return MAIN
    if text == BTN_HOME:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        return MAIN

    await update.message.reply_text(PRICING_TEXT, reply_markup=section_keyboard())
    return PRICING

async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–µ–∫—Ü–∏—è ¬´FAQ¬ª: –Ω–∞–≤–∏–≥–∞—Ü–∏—è."""
    text = (update.message.text or "").strip()
    if text == BTN_BACK:
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
        return MAIN
    if text == BTN_HOME:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        return MAIN

    await update.message.reply_text(FAQ_TEXT, reply_markup=section_keyboard())
    return FAQ

async def handle_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–µ–∫—Ü–∏—è ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª: –Ω–∞–≤–∏–≥–∞—Ü–∏—è."""
    text = (update.message.text or "").strip()
    if text == BTN_BACK:
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
        return MAIN
    if text == BTN_HOME:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        return MAIN

    await update.message.reply_text(CONTACTS_TEXT, reply_markup=section_keyboard())
    return CONTACTS

# ------------------------- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê -------------------------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≤–∏–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –ø–∏—à–µ–º –≤ –ª–æ–≥–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –º—è–≥–∫–æ."""
    logger.exception("Unhandled error: %s", context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /start.",
                reply_markup=main_keyboard(),
            )
    except Exception:  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –±—ç–∫–∞–ø
        pass

# ------------------------- –¢–û–ß–ö–ê –í–•–û–î–ê -------------------------
def main() -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PTB."""
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = Application.builder().token(token).build()

    # –û–¥–∏–Ω ConversationHandler —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ MAIN/ABOUT/PRODUCTS/PRICING/FAQ/CONTACTS
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start), CommandHandler("help", cmd_help)],
        states={
            MAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main)],
            ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_about)],
            PRODUCTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_products)],
            PRICING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pricing)],
            FAQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_faq)],
            CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contacts)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        name="reference_conversation",
        persistent=False,
    )

    app.add_handler(conv)
    app.add_error_handler(on_error)

    logger.info("Reference bot is starting...")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
